/******************************************************************************************************************

	Name			: Library Management Script

    Description     : A database that stores information for the library such as the books issued by the students and faculty,
				      fines to be paid by them, additionally it stores book details, library details and allows admins to log into the systems.


	Authors			: Reetik Chandra and Bhuvan Shah

******************************************************************************************************************/

USE master
GO

/****** Object:  Database LibraryManagement     ******/
IF DB_ID('LibraryManagement') IS NOT NULL
	DROP DATABASE LibraryManagement
GO

CREATE DATABASE LibraryManagement
GO

USE LibraryManagement
GO

/****** Object:  Table Library  ******/ 
CREATE TABLE [Library](
	LibraryID			INT					PRIMARY KEY			IDENTITY(1,1)			NOT NULL,
	LibraryName			VARCHAR(50)														NOT NULL,
	LibraryAddress		VARCHAR(50)															NULL,
	LibraryPhone		VARCHAR(50)															NULL, 
	LibraryCity			VARCHAR(50)														NOT NULL,
	LibraryState		CHAR(2)															NOT NULL,
	LibraryZip			VARCHAR(20)														NOT NULL
)
GO

/****** Object:  Table Books  ******/   
CREATE TABLE Books(
	BookID				INT					PRIMARY KEY			IDENTITY(1,1)			NOT NULL,
	BookTitle			VARCHAR(100)														NULL,
	AuthorName			VARCHAR(100)														NULL,
	ISBN				VARCHAR(100)													NOT NULL, 
	Publication			VARCHAR(100)													NOT NULL,
	BookGenre			VARCHAR(100)														NULL,
	Pages				INT																NOT NULL,
	Cost				VARCHAR(100)													NOT NULL
)
GO

/****** Object:  Table Members     ******/
CREATE TABLE Members(
	MemberID			INT					PRIMARY KEY			IDENTITY(1,1)			NOT NULL,
	MemberFirstName		VARCHAR(50)														NOT NULL,
	MemberLastName		VARCHAR(50)														NOT NULL,
	MemberPhoneNumber	VARCHAR(50)															NULL,
	MemberCredit		MONEY																NULL,
	isFaculty			BIT																NOT NULL
) 
GO

/****** Object:  Table Admins      ******/
CREATE TABLE Admins(
	AdminID				INT					PRIMARY KEY			IDENTITY(1,1)			NOT NULL,
	UserName			VARCHAR(100)													NOT NULL,
	UserPassword		VARCHAR(100)													NOT NULL,
	isAdmin				BIT										DEFAULT(0)				NOT NULL
)
GO

/****** Object:  Table MemberIssuedBooks     ******/
CREATE TABLE MemberIssuedBooks(
	MemberID		INT				FOREIGN KEY		REFERENCES Members(MemberID)		NOT NULL,  
	BookID			INT				FOREIGN KEY		REFERENCES Books(BookID)			NOT NULL,
	LibraryID		INT				FOREIGN KEY		REFERENCES [Library](LibraryID)		NOT NULL,
	DateOfIssue		SMALLDATETIME														NOT NULL,
	DateOfReturn	SMALLDATETIME														NOT NULL
)
GO



/************************************************************************************************************  
												TABLE POPULATION
*************************************************************************************************************/


SET IDENTITY_INSERT ADMINS ON
INSERT Admins(AdminID, UserName, UserPassword, isAdmin) VALUES 
(1,'Bhuvan12', HASHBYTES('SHA2_512','123abce'), 1 ),
(2, 'chandrr2',  HASHBYTES('SHA2_512' , 'p@$$w0Rd'), 1),
(3, 'randomuser',  HASHBYTES('SHA2_512' , 'pw1234@'), 0)
SET IDENTITY_INSERT ADMINS OFF
GO


SET IDENTITY_INSERT Library ON 
INSERT Library (LibraryID, LibraryName, LibraryAddress, LibraryPhone, LibraryCity, LibraryState, LibraryZip) VALUES
(1, 'Weber-Graham' , '2327 Sutteridge Center', '915-780-4255' , 'El Paso' ,'TX','88514'	)				,	
(2, 'Auer-MacGyver', '9898 Miller Park' , '602-434-7678', 'Phoenix' , 'AZ' , '85072' )					,
(3, 'Haag Inc' , '6711 Dryden Crossing' , '601-630-7061', 'Meridian', 'MS' , '39305')					,
(4,'Nader-Auer' ,'80413 Mifflin Center' , '339-841-7380', 'Woburn' , 'MA' , '01813'	)					,
(5,'Blick, Tromp and Rodriguez', '5 Hauk Junction' , '412-411-5475' , 'Pittsburgh', 'PA', '15261')		,
(6,'Kris, Terry and Skiles', '8491 Oxford Court' , '202-662-0753', 'Washington', 'DC', '20420'	)		,
(7,'Larson, Kunze and Dare', '02 Oak Point' , '850-289-0106', 'Pensacola' ,'FL', '32526'	)			,
(8,'Donnelly, Gutkowski and Gleichner' , '042 Atwood Trail', '810-624-9456', 'Flint','MI', '48505'	)	,
(9,'Gorczany and Sons', '8326 Hovde Drive', '408-677-0925', 'San Jose','CA', '95138')					,
(10,'Bartoletti Inc', '20 Granby Way', '915-740-6116', 'El Paso', 'TX', '79905'	)						,
(11,'Crist LLC', '12 Sheridan Center', '571-289-1429', 'Arlington', 'VA', '22212'	)					,
(12,'Rogahn and Sons','73019 Merchant Drive' ,'858-327-9733', 'San Diego','CA','92127'	)				,
(13,'Cummerata-Gleason','27788 Fieldstone Hill','816-706-4399','Kansas City','MO','64153'	)			,
(14,'Gottlieb-Veum','96 Del Sol Point','703-573-7369','Washington','DC','20041'		)					,
(15,'Ernser LLC' ,'567 Meadow Valley Center', '515-453-1749', 'Des Moines', 'IA', '50310'	)			,
(16,'Bartoletti Group', '278 Hazelcrest Avenue', '720-714-3975', 'Arvada','CO','80005'		)			,
(17,'Schaefer and Sons', '08 Vera Place', '602-488-7413', 'Phoenix', 'AZ','85045'	)					,
(18,'Torp, Prosacco and McClure', '91334 Ohio Trail', '202-146-6359', 'Alexandria', 'VA', '22301'	)	,
(19,'Kulas, McDermott and Marks','4 Graceland Drive','901-685-8559', 'Memphis', 'TN', '38126'	)		,
(20,'Pagac Inc', '47 Park Meadow Crossing','801-454-4460', 'Salt Lake City', 'UT', '84189'	)			,
(21,'Beier, Gulgowski and Effertz', '69318 Portage Junction','214-144-6991','Dallas', 'TX', '75379'	)	,
(22,'Nolan LLC','024 Oak Valley Point', '913-216-7102','Shawnee Mission','KS', '66205'	)				,
(23,'OKon-Jacobi','3 Autumn Leaf Junction', '412-597-9671', 'Pittsburgh', 'PA', '15255'		)			,
(24,'Gulgowski and Sons', '516 Mitchell Park', '915-461-5764','El Paso','TX','79968'	)				,
(25,'Johns Group','372 Sherman Circle','602-494-6912','Scottsdale','AZ','85260'),
(26,'Glover Group','20884 Schurz Drive','202-294-0687','Washington','DC','20520'),
(27,'Ward, Goodwin and Borer','316 Hallows Crossing','989-402-0796','Midland','MI','48670'),
(28,'Blanda Group','168 Division Street','410-146-0438','Ridgely','MD','21684'),
(29,'Dickinson and Sons','951 Welch Point','417-644-3569','Springfield','MO','65805'),
(30,'Muller-Funk','26548 Dahle Trail','772-533-2686','Fort Pierce','FL','34981')


SET IDENTITY_INSERT Library OFF
GO


SET IDENTITY_INSERT BOOKS ON
INSERT BOOKS (BookID,BookTitle,AuthorName,ISBN,Publication,BookGenre,Pages,Cost) VALUES
(1, 'Brimstone and Treacle', 'Mab Speight', '296144460-8', 'Quest Multimedia', 'Drama|Thriller', 753, '$431.43'),
(2, 'Apt Pupil', 'Tyler Kinzel', '251472454-6', 'Ross Maintenance', 'Drama|Thriller', 218, '$427.13'),
(3, 'Enigma', 'Denna Vedenyapin', '252092095-5', 'The Potter', 'Romance|Thriller', 627, '$150.72'),
(4, 'El asombroso mundo de Borjamari y Pocholo', 'Derwin Bachmann', '026798468-5', 'Taber Media Services', '(no genres listed)', 422, '$147.49'),
(5, 'Holiday Wishes', 'Philippe Leckenby', '848203167-8', 'Friend Of Truth Publishing', 'Children|Comedy|Drama', 187, '$36.09'),
(6, 'FDR: American Badass!', 'Hailey Rennebeck', '626531227-8', 'Smoke Rise Riding Club', 'Action|Comedy', 634, '$343.52'),
(7, 'Only Old Men Are Going to Battle (V boy idut odni stariki)', 'Judd Vallender', '553734982-5', 'Platinum Intermedia', 'Comedy|Drama|War', 140, '$37.87'),
(8, 'Kill Theory', 'Billy Wickardt', '667874745-3', 'Platinum Intermedia', 'Horror|Thriller', 371, '$111.68'),
(9, 'Dragon Ball Z the Movie: The Tree of Might (Doragon bôru Z 3: Chikyû marugoto chô kessen)', 'Roberta Hungerford', '146430532-3', 'Platinum Intermedia', 'Action|Adventure|Animation|Sci-Fi', 718, '$360.96'),
(10, 'Young Guns II', 'Edita Unwins', '390597433-9', 'Golden Hind Press', 'Action|Western', 736, '$46.71'),
(11, 'Abraham''s Valley (Vale Abraão)', 'Ibby Barkhouse', '919588622-2', 'Redemptorist Fathers', 'Drama', 384, '$348.38'),
(12, 'Go Now', 'Emogene Petican', '931817511-6', 'Werdomains.com', 'Drama', 221, '$356.11'),
(13, 'Abraham''s Valley (Vale Abraão)', 'Ibby Barkhouse', '919588622-2', 'Redemptorist Fathers', 'Drama', 384, '$348.38'),
(14, 'Other Shore, The', 'Conney Redgate', '642054159-X', 'Avalon Books', 'Adventure|Documentary', 509, '$62.49'),
(15, 'Unsinkable Molly Brown, The', 'Kelwin Cobbledick', '695903443-4', 'Ross Maintenance', 'Musical', 229, '$295.09'),
(16, 'Innocent Sleep, The', 'Carson Village', '851936162-5', 'Jon Eric Paris', 'Crime', 295, '$112.58'),
(17, 'Mahoney''s Last Stand', 'Forrest Tomlin', '785303306-0', 'Haymarket Group Ltd', 'Drama', 731, '$154.25'),
(18, 'Flags of Our Fathers', 'Gan Lambert', '844463428-X', 'Werdomains.com', 'Drama|War', 241, '$445.64'),
(19, 'Playing for Time', 'Jodi Zimmermeister', '898436546-7', 'Friend Of Truth Publishing', 'Drama', 171, '$269.05'),
(20, 'Tormented', 'Harriette Ciccerale', '787915353-5', 'Redemptorist Fathers', 'Horror|Thriller', 952, '$467.60'),
(21, 'Public Housing', 'Jesselyn Bengtsen', '286567119-4', 'Golden Hind Press', 'Documentary', 674, '$395.91'),
(22, 'Thing: Terror Takes Shape, The', 'Ardys Shellsheere', '452922878-9', 'The Potter', 'Documentary', 600, '$448.48'),
(23, 'Abraham''s Valley (Vale Abraão)', 'Ibby Barkhouse', '919588622-2', 'Redemptorist Fathers', 'Drama', 384, '$348.38'),
(24, 'Silent Night, Deadly Night Part 2', 'Bronnie MacGiany', '365710545-X', 'Avalon Books', 'Comedy|Horror', 432, '$347.95'),
(25, 'High School', 'Bing Robberecht', '353873888-2', 'Jon Eric Paris', 'Documentary', 661, '$194.99'),
(26, 'Manos: The Hands of Fate', 'Dianna Emma', '337922978-4', 'Right Side Media', 'Horror', 705, '$267.81'),
(27, 'Goodbye First Love', 'Dalston Hurt', '436198142-6', 'The Potter', 'Drama|Romance', 75, '$249.14'),
(28, 'Men in White', 'Kristoffer Furphy', '062562416-5', 'Golden Hind Press', '(no genres listed)', 784, '$332.85'),
(29, 'Lonesome Jim', 'Paddy Buesden', '401140949-9', 'Quest Multimedia', 'Drama|Romance', 732, '$86.26'),
(30, 'Latcho Drom', 'Chloette Balch', '593206742-X', 'Taber Media Services', 'Documentary|Musical', 297, '$400.54'),
(31, 'Ju-on: White Ghost', 'Tobe MacNab', '420308693-0', 'Smoke Rise Riding Club', 'Horror', 653, '$462.66'),
(32, 'White Mischief', 'Drona Stallard', '489576476-1', 'Cap-Stk', 'Crime|Drama|Romance|Thriller', 650, '$238.16'),
(33, 'Father and Son (Otets i syn)', 'Ashlen Tinniswood', '577445142-9', 'Avalon Books', 'Drama', 180, '$353.87'),
(34, 'Tapia', 'Melisent Sturton', '444480788-1', 'Renaissance Publishing Company', 'Documentary', 602, '$175.97'),
(35, 'Eddie Izzard: Force Majeure Live', 'Aloin Bugbird', '432920303-0', 'Haymarket Group Ltd', 'Comedy', 273, '$61.10'),
(36, 'Devil Hunter (El caníbal)', 'Domingo Moscone', '523671918-6', 'Smoke Rise Riding Club', 'Horror', 998, '$19.26'),
(37, 'Soul Assassin', 'Merrielle Hayter', '424482096-5', 'Cap-Stk', 'Action|Crime|Thriller', 189, '$40.69'),
(38, 'Sisterhood of the Traveling Pants, The', 'Emalee Ameer-Beg', '789626376-9', 'Smoke Rise Riding Club', 'Adventure|Comedy|Drama', 299, '$314.57'),
(39, 'Abraham''s Valley (Vale Abraão)', 'Ibby Barkhouse', '919588622-2', 'Redemptorist Fathers', 'Drama', 384, '$348.38'),
(40, 'King''s Game (Kongekabale)', 'Halley MacDonough', '448169965-5', 'Redemptorist Fathers', 'Thriller', 973, '$365.66'),
(41, 'Homem Que Desafiou o Diabo, O', 'Bab Mault', '855820988-X', 'Golden Hind Press', 'Comedy', 124, '$284.50'),
(42, 'Soul Assassin', 'Merrielle Hayter', '424482096-5', 'Cap-Stk', 'Action|Crime|Thriller', 189, '$40.69'),
(43, 'Queen of the Damned', 'Brinna Eddolls', '547669254-1', 'Cap-Stk', 'Fantasy|Horror', 352, '$487.15'),
(44, 'Hooper', 'Emmit Huckerbe', '152007392-5', 'Quest Multimedia', 'Action|Comedy', 340, '$497.36'),
(45, 'Krabat', 'Annmarie Baelde', '970758218-9', 'Quest Multimedia', 'Drama|Fantasy', 801, '$63.37'),
(46, 'Schooled: The Price of College Sports ', 'Charlton Burgwin', '515075662-8', 'Haymarket Group Ltd', 'Documentary', 194, '$19.88'),
(47, 'Wilbur Wants to Kill Himself', 'Violante Kubek', '820482943-4', 'Taber Media Services', 'Comedy|Drama|Romance', 757, '$490.97'),
(48, 'Paths of Hate', 'Hadlee Daniel', '240375086-7', 'Redemptorist Fathers', 'Action|Animation|Drama|War', 654, '$162.15'),
(49, 'My Man (Mon homme)', 'Crystal Seekings', '467599568-3', 'Werdomains.com', 'Comedy|Drama|Romance', 713, '$382.96'),
(50, 'Twenty Days Without War (Dvadtsat dney bez voyny)', 'Sterne Tripon', '227376254-2', 'Taber Media Services', 'Drama|Romance|War', 531, '$473.92'),
(51, 'Roman Holiday', 'Iggie Sansun', '405757554-5', 'Ross Maintenance', 'Comedy|Drama|Romance', 424, '$82.02'),
(52, 'Young Adult', 'Anita Goodreid', '775713827-2', 'Cap-Stk', 'Comedy|Drama', 550, '$464.13'),
(53, 'Sunfish, The (Klumpfisken)', 'Florance Peschet', '904583477-4', 'Right Side Media', 'Drama', 288, '$165.18'),
(54, 'Missing', 'Fairfax Baggarley', '706065951-X', 'Taber Media Services', 'Drama|Mystery|Thriller', 761, '$171.82'),
(55, 'Muppet Treasure Island', 'Cully Taile', '301366192-5', 'Albany Honda', 'Adventure|Children|Comedy|Musical', 188, '$101.39'),
(56, 'Killer, The (Die xue shuang xiong)', 'Carol-jean Quin', '418749745-5', 'Werdomains.com', 'Action|Crime|Drama|Thriller', 703, '$131.60'),
(57, 'The Photographer', 'Carmelia Pordal', '971765248-1', 'INTEGRITY INCORPORATED', 'Drama', 79, '$115.25'),
(58, 'Path to War', 'Rhea Lalley', '544661163-2', 'Jon Eric Paris', 'Drama', 805, '$6.08'),
(59, 'Caligula', 'Eryn Eykel', '468652674-4', 'Golden Hind Press', 'Drama', 864, '$344.76'),
(60, 'Free Soul, A', 'Ashlen Joao', '580604376-2', 'The Potter', 'Drama', 326, '$465.88'),
(61, 'Alone with Her', 'Horton Merrien', '231618838-9', 'Home Guide Magazine', 'Crime|Drama|Thriller', 812, '$444.10'),
(62, 'David Cross: Let America Laugh', 'Alie Wasling', '704180686-3', 'Friend Of Truth Publishing', 'Comedy|Documentary', 862, '$277.49'),
(63, 'Isadora', 'Candra Alesio', '947239010-2', 'Platinum Intermedia', 'Drama', 199, '$119.47'),
(64, 'Mirror Mirror', 'Chip MacCombe', '025615227-6', '', 'Adventure|Comedy|Fantasy', 993, '$240.67'),
(65, 'Clonehunter', 'Robb Ruller', '882003944-3', 'Haymarket Group Ltd', 'Sci-Fi', 931, '$479.27'),
(66, 'D.O.A.', 'Carny Grassot', '190034223-5', 'Werdomains.com', 'Drama|Film-Noir|Mystery', 732, '$380.87'),
(67, 'Third Wheel, The', 'Beulah Chubb', '860174034-0', 'King Publishing', 'Comedy|Romance', 97, '$440.78'),
(68, 'Pusher', 'Cheslie MacNelly', '567141973-5', 'Haymarket Publishing', 'Crime|Thriller', 594, '$478.44'),
(69, 'Patriot, The', 'Vasili Rubel', '258092582-1', 'Avalon Books', 'Action|Drama|War', 612, '$60.80'),
(70, 'Encounter in the Third Dimension', 'Bryanty Laven', '325703364-8', 'Cap-Stk', 'IMAX', 172, '$103.98'),
(71, 'One Man Band', 'Giulio Beefon', '665484013-5', 'Jon Eric Paris', 'Animation|Comedy|Musical', 287, '$486.87'),
(72, 'Kangaroo Jack', 'Pall Eversley', '575977865-X', 'Clear Orbit', 'Action|Comedy', 761, '$282.40'),
(73, 'Boat, The', 'Bertha Blann', '834062116-5', 'Clear Orbit', 'Comedy', 969, '$179.91'),
(74, 'The Walking Stick', 'Tommy Seczyk', '251613806-7', 'Albany Honda', 'Crime|Drama|Romance', 107, '$157.30'),
(75, 'Tristana', 'Adaline Pingstone', '442627626-8', 'King Publishing', 'Drama', 727, '$361.42'),
(76, 'Girls Town', 'Darwin Agett', '302771841-X', 'Cap-Stk', 'Comedy|Drama', 871, '$407.81'),
(77, 'Circles (Krugovi)', 'Liesa Di Pietro', '687484480-6', 'Avalon Books', 'Drama', 630, '$6.64'),
(78, 'Phish: Bittersweet Motel', 'Ole Reinert', '305851187-6', 'King Publishing', 'Documentary', 938, '$380.53'),
(79, 'Antonia''s Line (Antonia)', 'Andres Beseke', '905479509-3', 'King Publishing', 'Comedy|Drama', 457, '$32.55'),
(80, 'Diary of a Wimpy Kid: Rodrick Rules', 'Martica Godbald', '110232295-4', 'Redemptorist Fathers', 'Comedy', 102, '$382.03'),
(81, 'Spinout', 'Herc Svanetti', '569973832-0', 'Taber Media Services', 'Comedy|Musical', 811, '$376.59'),
(82, 'Prince of Tides, The', 'Emogene MacCall', '062953454-3', 'Clear Orbit', 'Drama|Romance', 407, '$332.90'),
(83, 'The Sea Vultures', 'Sherlock Franzolini', '817625918-7', 'Taber Media Services', 'Drama', 234, '$378.79'),
(84, 'Street Scene', 'Marieann Cabane', '151883178-8', 'King Publishing', 'Drama', 522, '$187.13'),
(85, 'Miffo', 'Tomas Disman', '463091921-X', 'Avalon Books', 'Comedy|Drama|Romance', 997, '$9.37'),
(86, 'Trance', 'Spense Ugo', '844668901-4', 'Jon Eric Paris', 'Mystery|Thriller', 174, '$54.87'),
(87, 'Sonic Outlaws', 'Boycie Putt', '120040755-5', 'KIng Publishing', 'Documentary', 722, '$202.56'),
(88, 'American Addict', 'Chaddie Gulston', '084547788-9', 'Platinum Intermedia', 'Documentary', 635, '$242.02'),
(89, 'Last Valley, The', 'Reggie McCallion', '027362433-4', 'Cap-Stk', 'Adventure', 910, '$196.12'),
(90, 'Last Will of Dr. Mabuse', 'Oliy Lusgdin', '390915179-5', 'Clear Orbit', 'Crime|Horror|Mystery', 511, '$135.65'),
(91, 'Kiki', 'Pen Vida', '088474052-8', 'Smoke Rise Riding Club', 'Comedy', 483, '$211.95'),
(92, 'God Who Wasn''t There, The', 'Penelope Hatherall', '929850196-X', 'Werdomains.com', 'Documentary', 473, '$124.34'),
(93, 'Martin Lawrence Live: Runteldat', 'Mattheus Tregian', '449801451-0', 'Right Side Media', 'Comedy|Documentary', 90, '$435.47'),
(94, 'Where the Trail Ends', 'Tamarra Shelton', '258814242-7', 'Jon Eric Paris', 'Adventure|Documentary|Drama', 376, '$196.86'),
(95, 'Cheap Detective, The', 'Alexei Normanton', '497256371-0', 'King Publishing', 'Comedy', 776, '$267.59'),
(96, 'Picture Bride (Bijo photo)', 'Aurlie Vondrach', '968456245-4', 'Cap-Stk', 'Drama|Romance', 449, '$275.30'),
(97, 'Duchess, The', 'Webb Lille', '234699114-7', 'Smoke Rise Riding Club', 'Drama|Romance', 688, '$270.04'),
(98, 'Wrong', 'Joanie Corkhill', '844113652-1', 'Smoke Rise Riding Club', 'Comedy|Drama', 150, '$278.68'),
(99, 'Red', 'Kerri Douch', '454801590-6', 'Smoke Rise Riding Club', 'Action|Comedy', 208, '$72.77'),
(100, 'Boy Wonder', 'Michal Ciementini', '993391385-9', 'Avalon Books', 'Action|Crime|Drama', 796, '$156.89')
SET IDENTITY_INSERT Books OFF
GO


SET IDENTITY_INSERT Members ON
INSERT Members (MemberID, MemberFirstName, MemberLastName, MemberPhoneNumber, MemberCredit, isFaculty) VALUES
(1, 'Nap', 'Keighly', '439-882-9828', 100, 0),
(2, 'Abe', 'Reignard', '284-593-6929', 20, 0),
(3, 'Denise', 'Lowdeane', '326-963-5922', 40, 1),
(4, 'Giustina', 'Lecointe', '192-394-2251', 50, 0),
(5, 'Miof mela', 'Infantino', '762-130-7875', 80, 0),
(6, 'Hermann', 'Frill', '763-115-3305', 34, 1),
(7, 'Kipper', 'Walak', '998-868-7808', 19.50, 0),
(8, 'Kayla', 'Allward', '377-759-7472', 40.96, 0),
(9, 'Marius', 'Battie', '305-284-9729', 20.04, 1),
(10, 'Mollie', 'Emberton', '362-561-0734', 10.03, 0),
(11, 'Lanny', 'Phillips', '664-763-4169', 200, 0),
(12, 'Bertrando', 'Briddock', '600-314-1618', 10, 0),
(13, 'Emelia', 'Grinval', '496-859-6154', 5, 0),
(14, 'Jenica', 'Wickey', '988-274-7234', NULL, 1),
(15, 'Ashlee', 'Benediktsson', '757-557-8376', NULL, 1),
(16, 'Bekki', 'Riche', '723-906-6764', 50, 1),
(17, 'Roxanna', 'Iacovino', '637-515-9396', 45,  1),
(18, 'Carney', 'Eynaud', '120-621-4610', 25, 1),
(19, 'Susana', 'Westgate', '193-307-3410', 15, 0),
(20, 'Cynde', 'Tewelson', '492-772-0346', 75, 1),
(21, 'Mariann', 'Cominetti', '783-756-3584', 60, 0),
(22, 'Bryna', 'Capaldi', '614-548-9236', 42, 0),
(23, 'Erica', 'Tellett', '557-613-3593', 32, 0),
(24, 'Lewiss', 'Helian', '611-406-8826', 64, 0),
(25, 'Hildegaard', 'Giroldi', '939-117-7692', 30, 0),
(26, 'Olwen', 'McFadyen', '773-230-8441', 111, 1),
(27, 'Dehlia', 'Freeberne', '240-288-1500', 45.50, 0),
(28, 'Alonso', 'Crewe', '709-994-8944',  20.00, 1),
(29, 'Celine', 'Gaynor', '657-118-1224', 17, 0),
(30, 'Garret', 'Fillon', '512-213-3645', 200,1),
(31, 'Saw', 'McKeller', '836-992-5655',  100, 0),
(32, 'Marty', 'Edowes', '647-999-1856', 99.99, 1),
(33, 'Nissie', 'Loggie', '831-858-5962', 150, 0),
(34, 'Jeromy', 'Blasiak', '821-330-0953', 105,  0),
(35, 'Norene', 'Sans', '738-511-9385', 55, 1),
(36, 'Corine', 'Dumberrill', '432-336-7922', 40.00, 0),
(37, 'Reginauld', 'Svanini', '309-354-5706', 33, 1),
(38, 'Enrika', 'Clifford', '835-749-3164',  66, 0),
(39, 'Almeda', 'Goundrill', '377-263-2724', 77, 0),
(40, 'Julia', 'Snodden', '487-961-9653',  44, 1),
(41, 'Roch', 'Pellman', '935-939-6127', 88, 0),
(42, 'Gabriella', 'Emson', '948-135-9699', 22, 1),
(43, 'Kare', 'Scryne', '613-800-1721',  25, 0),
(44, 'Faustina', 'Greening', '393-259-0177', 19,  0),
(45, 'Dorene', 'Heninghem', '568-968-9712', 44, 0),
(46, 'Mellisa', 'Chelsom', '170-769-8013',  100, 0),
(47, 'Ringo', 'Draycott', '734-996-9727', 12.50, 0),
(48, 'Marius', 'Verecker', '587-368-6630', 11, 1),
(49, 'Mead', 'MacNeil', '899-586-4854',5, 1),
(50, 'Karoly', 'McGahey', '940-739-8932', 89, 0),
(51, 'Alvan', 'Braunes', '336-941-5751', 49, 0),
(52, 'Yvor', 'Olwen', '316-443-8389',  56,1),
(53, 'Gay', 'Poser', '469-973-1856', 76.50, 0), 
(54, 'Amitie', 'Thunderchief', '182-374-2878', 86.70, 0),
(55, 'Dylan', 'Corriea', '726-250-8303',  78.90,1),
(56, 'Jesse', 'Klazenga', '228-587-9665', 69, 0),
(57, 'Ryon', 'McCurlye', '883-213-3913',  67, 1),
(58, 'Doroteya', 'Vyvyan', '352-470-0216',  100, 0),
(59, 'Loria', 'Corkish', '343-860-6498',  81, 1),
(60, 'Corly', 'Brigge', '912-643-5517', NULL, 0)

SET IDENTITY_INSERT Members OFF
GO


INSERT MemberIssuedBooks (MemberID, BookID, LibraryID, DateOfIssue, DateOfReturn) VALUES 
(6, 74, 22, '2021-01-03 13:33:42', '2021-02-22 15:41:02'),
(21, 78, 15, '2020-12-16 09:20:08', '2021-03-04 10:24:06'),
(35, 57, 19, '2020-11-29 14:34:23', '2021-03-10 20:11:44'),
(49, 83, 5, '2020-11-23 04:44:07', '2021-02-17 11:22:37'),
(12, 30, 16, '2021-01-13 15:17:05', '2021-03-18 23:22:06'),
(13, 89, 12, '2020-12-19 08:04:24', '2021-02-28 08:08:40'),
(56, 62, 6, '2020-12-20 16:11:22', '2021-02-28 17:14:33'),
(44, 15, 7, '2020-12-07 00:52:45', '2021-03-10 17:42:05'),
(17, 79, 28, '2020-12-28 14:16:21', '2021-03-01 20:18:32'),
(15, 88, 2, '2020-12-11 15:52:11', '2021-03-05 23:25:38'),
(9, 97, 11, '2020-11-24 03:33:01', '2021-03-08 04:43:59'),
(9, 58, 30, '2020-11-25 07:56:42', '2021-03-07 10:50:41'),
(53, 2, 24, '2020-12-29 18:31:57', '2021-02-25 14:56:19'),
(33, 43, 20, '2020-12-26 22:46:32', '2021-02-08 00:19:43'),
(44, 2, 4, '2020-11-20 15:39:39', '2021-02-02 14:02:27'),
(4, 100, 11, '2021-01-10 06:39:41', '2021-02-11 12:08:03'),
(1, 92, 16, '2021-01-05 10:53:28', '2021-03-11 09:23:21'),
(56, 99, 14, '2020-12-05 17:21:15', '2021-02-19 19:09:53'),
(28, 18, 15, '2020-12-28 01:48:05', '2021-01-22 07:03:22'),
(2, 14, 22, '2020-11-24 14:55:31', '2021-01-30 06:41:03'),
(9, 91, 16, '2021-01-04 15:04:36', '2021-01-20 19:15:01'),
(15, 89, 26, '2020-12-10 14:18:06', '2021-01-22 17:31:01'),
(8, 75, 8, '2020-12-10 04:10:04', '2021-03-12 03:57:37'),
(39, 98, 14, '2020-11-26 17:52:12', '2021-01-24 04:01:46'),
(39, 77, 27, '2021-01-12 04:12:19', '2021-02-16 02:55:38'),
(5, 75, 24, '2020-12-07 11:41:34', '2021-02-05 21:48:53'),
(49, 89, 17, '2020-11-18 14:27:53', '2021-01-27 19:52:25'),
(13, 65, 17, '2020-12-22 15:04:38', '2021-02-07 22:42:53'),
(60, 64, 1, '2020-11-17 05:35:32', '2021-01-23 03:02:16'),
(54, 72, 15, '2021-01-05 02:27:00', '2021-01-31 15:38:12'),
(9, 87, 7, '2020-11-22 22:43:23', '2021-01-16 00:14:39'),
(9, 57, 12, '2020-12-12 07:19:47', '2021-01-24 20:09:45'),
(52, 79, 13, '2020-11-16 10:30:51', '2021-03-07 10:12:19'),
(22, 89, 15, '2020-11-17 20:18:18', '2021-01-19 02:08:29'),
(12, 77, 20, '2020-12-19 12:34:54', '2021-03-19 21:56:46'),
(10, 68, 19, '2020-12-07 03:24:56', '2021-02-22 04:04:03'),
(45, 42, 21, '2021-01-06 03:39:24', '2021-01-25 03:26:52'),
(35, 29, 16, '2020-12-19 14:15:29', '2021-02-20 09:16:59'),
(44, 94, 14, '2020-12-05 03:39:59', '2021-02-08 10:33:48'),
(10, 74, 2, '2021-01-06 06:32:27', '2021-02-28 22:57:58'),
(57, 17, 1, '2020-12-12 09:16:52', '2021-03-11 06:25:32'),
(16, 60, 4, '2020-12-21 01:03:30', '2021-03-19 10:48:19'),
(44, 23, 26, '2020-11-26 13:36:19', '2021-01-30 23:44:15'),
(56, 19, 18, '2021-01-04 23:41:27', '2021-02-21 19:21:08'),
(49, 32, 5, '2020-11-18 19:21:46', '2021-03-09 09:50:18'),
(36, 67, 12, '2020-11-30 03:39:00', '2021-02-18 15:06:10'),
(5, 77, 13, '2020-12-07 15:19:03', '2021-03-11 19:19:17'),
(31, 34, 25, '2020-12-01 22:30:11', '2021-02-05 16:44:24'),
(47, 64, 23, '2020-12-17 09:08:33', '2021-01-20 18:58:43'),
(8, 13, 20, '2020-11-22 05:30:41', '2021-01-23 05:53:44'),
(26, 34, 16, '2021-01-10 00:00:15', '2021-01-20 21:56:25'),
(14, 1, 18, '2020-12-15 21:26:35', '2021-02-10 02:59:25'),
(32, 43, 14, '2020-11-17 11:46:36', '2021-01-28 19:22:10'),
(52, 97, 22, '2020-12-07 02:25:49', '2021-01-19 15:46:09'),
(33, 69, 3, '2020-11-19 12:43:54', '2021-02-23 08:49:33'),
(25, 46, 21, '2021-01-03 08:49:10', '2021-01-21 03:14:17'),
(3, 61, 11, '2020-12-09 06:35:10', '2021-03-16 05:49:51'),
(20, 90, 29, '2020-12-26 04:11:49', '2021-02-07 23:49:44'),
(60, 36, 13, '2021-01-14 09:38:35', '2021-02-07 22:08:07'),
(28, 66, 26, '2020-12-31 09:08:16', '2021-01-22 23:11:16'),
(28, 11, 5, '2020-12-30 10:46:10', '2021-02-03 15:34:27'),
(44, 85, 6, '2020-12-26 23:09:17', '2021-03-16 06:46:30'),
(44, 59, 4, '2020-11-18 20:01:03', '2021-02-12 22:07:56'),
(59, 87, 5, '2021-01-07 08:02:56', '2021-03-19 23:03:55'),
(55, 21, 2, '2021-01-12 03:38:03', '2021-02-02 01:05:07'),
(29, 31, 20, '2020-11-17 01:15:50', '2021-02-04 02:03:13'),
(31, 49, 9, '2020-12-11 22:21:32', '2021-02-03 19:00:29'),
(57, 67, 28, '2020-12-22 02:37:36', '2021-02-04 16:24:59'),
(26, 88, 23, '2021-01-13 09:25:01', '2021-03-07 07:11:49'),
(2, 88, 1, '2020-12-19 19:21:17', '2021-02-13 07:42:10'),
(32, 13, 5, '2020-11-26 10:52:23', '2021-02-01 21:39:56'),
(11, 71, 3, '2020-11-19 19:37:21', '2021-02-19 20:01:57'),
(20, 37, 17, '2020-11-28 13:43:44', '2021-01-25 11:54:14'),
(20, 68, 6, '2020-11-16 03:39:05', '2021-03-16 17:02:32'),
(5, 72, 27, '2020-11-28 02:41:45', '2021-02-13 08:18:09'),
(2, 23, 5, '2020-12-04 06:39:29', '2021-02-04 11:34:55'),
(60, 12, 17, '2021-01-04 10:37:01', '2021-02-18 06:48:40'),
(52, 66, 1, '2020-12-04 18:57:49', '2021-02-04 09:41:13'),
(54, 37, 25, '2020-11-16 03:02:02', '2021-02-25 22:45:49'),
(28, 2, 1, '2021-01-14 13:56:40', '2021-02-10 18:36:39'),
(46, 95, 28, '2020-12-05 20:44:17', '2021-01-26 00:03:40'),
(59, 65, 30, '2021-01-10 18:08:49', '2021-01-17 09:43:37'),
(11, 83, 28, '2020-12-25 12:26:33', '2021-01-21 03:06:58'),
(3, 33, 11, '2020-11-16 06:18:30', '2021-02-04 23:50:18'),
(32, 65, 22, '2020-12-24 01:37:06', '2021-01-21 01:32:08'),
(38, 71, 26, '2020-12-13 00:31:56', '2021-02-21 07:25:30'),
(11, 23, 19, '2020-12-23 12:54:07', '2021-03-12 09:06:02'),
(33, 90, 20, '2020-12-21 19:19:33', '2021-01-25 06:27:49'),
(48, 39, 2, '2020-12-27 23:49:41', '2021-03-17 11:12:11'),
(16, 69, 9, '2020-12-21 21:57:13', '2021-03-04 00:51:25'),
(9, 12, 10, '2020-12-08 00:43:23', '2021-02-26 02:32:35'),
(14, 85, 12, '2020-12-15 23:16:53', '2021-01-27 13:10:51'),
(37, 9, 20, '2020-12-14 15:14:16', '2021-03-01 11:47:30'),
(21, 58, 19, '2021-01-09 15:47:40', '2021-02-23 10:27:25'),
(54, 15, 17, '2020-12-13 11:31:06', '2021-01-26 10:32:46'),
(43, 93, 11, '2020-12-07 21:48:17', '2021-02-13 00:46:59'),
(60, 81, 15, '2020-12-31 09:27:15', '2021-03-06 00:02:13'),
(53, 10, 26, '2020-11-17 01:06:13', '2021-03-07 16:16:49'),
(57, 59, 27, '2020-12-05 16:35:05', '2021-02-06 07:37:58'),
(17, 42, 9, '2021-01-14 10:23:18', '2021-02-27 04:50:05'),
(60, 52, 3, '2020-12-16 01:07:15', '2021-03-09 10:54:51'),
(50, 55, 7, '2020-12-16 08:05:49', '2021-02-28 21:37:41'),
(42, 56, 21, '2020-12-16 17:35:29', '2021-01-17 07:58:39'),
(24, 4, 26, '2020-12-27 11:41:21', '2021-03-01 20:50:52'),
(48, 15, 3, '2020-11-19 08:38:43', '2021-03-09 05:42:29'),
(22, 33, 5, '2020-12-28 00:47:24', '2021-02-08 17:46:58'),
(52, 77, 29, '2021-01-04 04:19:01', '2021-01-25 07:14:58'),
(24, 18, 22, '2021-01-10 00:25:35', '2021-01-20 19:19:01'),
(39, 53, 30, '2020-11-27 05:50:21', '2021-02-18 18:52:35'),
(28, 93, 28, '2020-12-10 13:39:30', '2021-02-09 21:44:18'),
(47, 68, 21, '2021-01-14 08:31:24', '2021-02-11 12:45:19'),
(8, 33, 4, '2020-12-23 12:21:07', '2021-02-02 16:38:23'),
(54, 10, 28, '2020-12-15 02:01:26', '2021-03-09 08:32:54'),
(24, 88, 29, '2021-01-12 06:45:58', '2021-02-23 11:26:03'),
(14, 33, 28, '2021-01-02 12:48:51', '2021-02-09 22:16:17'),
(47, 26, 10, '2021-01-09 13:14:09', '2021-03-18 22:20:49'),
(17, 50, 11, '2020-11-15 18:32:05', '2021-03-19 15:39:42'),
(49, 77, 8, '2020-12-22 04:12:47', '2021-02-02 03:20:58'),
(43, 5, 19, '2021-01-13 12:38:41', '2021-03-01 04:55:55'),
(19, 77, 3, '2020-12-09 16:38:03', '2021-02-12 17:04:26'),
(6, 49, 13, '2020-11-29 11:03:16', '2021-02-25 16:54:09'),
(26, 5, 1, '2020-12-15 07:01:47', '2021-01-17 14:06:45'),
(23, 97, 11, '2020-11-24 06:17:11', '2021-03-19 05:41:11'),
(22, 84, 27, '2021-01-02 12:24:27', '2021-02-09 16:54:00'),
(48, 98, 24, '2021-01-08 07:42:21', '2021-02-14 03:49:47'),
(48, 29, 19, '2020-12-26 02:12:23', '2021-01-31 12:19:58'),
(53, 93, 21, '2020-11-30 11:49:30', '2021-02-24 08:24:08'),
(42, 51, 8, '2020-12-16 16:20:38', '2021-02-27 06:26:41'),
(50, 35, 29, '2020-12-01 19:16:52', '2021-01-23 13:26:46'),
(9, 40, 5, '2020-11-30 19:03:31', '2021-03-09 05:03:38'),
(17, 30, 12, '2020-12-09 00:19:06', '2021-02-25 15:00:07'),
(60, 39, 17, '2021-01-09 15:27:03', '2021-02-28 20:30:58'),
(31, 54, 25, '2021-01-13 20:25:31', '2021-02-26 16:19:47'),
(27, 38, 11, '2020-11-15 10:16:09', '2021-03-04 13:43:25'),
(37, 83, 23, '2020-12-01 12:40:47', '2021-01-22 21:52:31'),
(37, 69, 9, '2020-12-29 20:56:30', '2021-03-02 02:51:47'),
(24, 9, 24, '2020-11-30 20:28:28', '2021-01-30 03:32:40'),
(42, 81, 15, '2020-11-27 20:58:43', '2021-02-23 15:14:24'),
(53, 55, 24, '2020-12-29 07:56:51', '2021-03-08 23:36:34'),
(38, 45, 10, '2020-12-17 18:15:50', '2021-03-04 02:05:57'),
(58, 14, 2, '2020-11-22 21:58:26', '2021-02-11 18:35:03'),
(40, 80, 18, '2021-01-09 05:42:37', '2021-03-05 21:27:13'),
(10, 21, 4, '2020-12-17 10:21:28', '2021-03-11 20:57:53'),
(55, 23, 9, '2021-01-07 15:27:12', '2021-01-23 15:36:11'),
(30, 81, 27, '2020-12-28 23:49:35', '2021-02-20 09:30:24'),
(18, 75, 1, '2020-12-04 06:36:32', '2021-02-22 05:52:55'),
(29, 7, 17, '2020-12-24 09:18:48', '2021-03-03 20:33:51'),
(38, 32, 15, '2021-01-05 16:07:27', '2021-02-03 13:40:09'),
(51, 62, 12, '2020-12-08 11:37:39', '2021-03-18 02:19:26'),
(29, 1, 13, '2020-11-25 19:31:38', '2021-01-24 20:28:24'),
(13, 85, 7, '2020-11-22 07:02:18', '2021-01-26 04:00:46'),
(4, 36, 9, '2020-12-10 02:09:08', '2021-03-06 00:32:41'),
(52, 34, 26, '2020-12-24 03:05:47', '2021-01-17 14:14:07'),
(34, 68, 12, '2021-01-12 14:58:51', '2021-02-16 03:46:31'),
(2, 2, 25, '2020-12-09 06:33:21', '2021-02-05 02:11:55'),
(35, 27, 21, '2020-12-31 09:17:45', '2021-03-12 00:43:23'),
(42, 42, 28, '2020-12-05 01:45:20', '2021-02-17 21:34:09'),
(19, 35, 24, '2020-12-07 01:41:10', '2021-01-31 06:47:07'),
(45, 97, 26, '2020-11-27 19:45:47', '2021-01-22 04:30:06'),
(14, 21, 15, '2020-12-06 07:07:58', '2021-02-07 17:36:45'),
(47, 70, 12, '2020-12-03 18:15:27', '2021-03-14 11:32:02'),
(53, 47, 29, '2021-01-03 15:54:32', '2021-01-21 22:23:13'),
(58, 29, 4, '2020-12-10 14:14:13', '2021-03-06 16:37:21'),
(22, 99, 11, '2020-12-21 12:08:29', '2021-01-19 04:04:42'),
(9, 41, 15, '2020-11-24 04:20:31', '2021-03-02 16:42:00'),
(48, 98, 19, '2020-12-01 07:44:00', '2021-01-19 04:40:02'),
(28, 20, 2, '2020-11-19 01:26:32', '2021-03-12 00:13:05'),
(37, 88, 30, '2021-01-09 23:48:16', '2021-02-08 04:30:47'),
(59, 39, 29, '2020-11-27 22:24:57', '2021-01-26 03:47:11'),
(28, 33, 8, '2021-01-11 21:53:00', '2021-03-07 21:04:29'),
(16, 47, 17, '2021-01-10 12:59:27', '2021-02-22 17:36:42'),
(40, 44, 27, '2020-12-04 09:41:10', '2021-02-26 19:51:59'),
(16, 15, 27, '2021-01-05 12:06:16', '2021-02-20 18:54:48'),
(10, 1, 3, '2020-12-29 17:11:05', '2021-01-29 01:43:13'),
(38, 11, 26, '2020-11-23 13:46:04', '2021-03-02 07:14:01'),
(13, 62, 2, '2020-12-16 00:27:36', '2021-03-14 23:37:14'),
(56, 41, 13, '2020-12-27 19:02:45', '2021-02-10 18:24:55'),
(3, 34, 24, '2020-12-10 01:47:43', '2021-02-27 11:29:40'),
(35, 99, 11, '2020-12-19 17:21:10', '2021-02-04 15:31:50'),
(35, 89, 7, '2020-11-28 07:58:50', '2021-01-22 02:31:54'),
(30, 4, 30, '2020-11-30 17:20:29', '2021-02-26 03:05:19'),
(46, 68, 24, '2020-12-20 21:05:05', '2021-03-07 17:43:22'),
(2, 61, 16, '2020-11-30 02:51:28', '2021-02-09 14:38:08'),
(60, 66, 17, '2020-11-22 13:57:04', '2021-01-29 01:53:52'),
(39, 59, 15, '2020-12-18 09:18:47', '2021-02-20 05:13:41'),
(43, 90, 13, '2021-01-10 19:43:02', '2021-03-10 19:07:19'),
(43, 51, 5, '2020-12-03 19:44:02', '2021-03-10 03:16:04'),
(48, 2, 10, '2020-11-25 03:49:38', '2021-03-11 19:26:43'),
(48, 91, 6, '2020-12-04 02:52:37', '2021-01-31 22:30:25'),
(30, 82, 28, '2020-12-09 21:39:28', '2021-02-14 09:05:59'),
(49, 30, 4, '2021-01-01 18:17:46', '2021-02-22 04:50:53'),
(23, 43, 2, '2020-11-26 08:48:11', '2021-02-02 22:46:32'),
(2, 71, 24, '2020-12-14 07:41:54', '2021-02-05 05:04:36'),
(43, 66, 19, '2020-12-01 05:49:14', '2021-01-28 09:23:54'),
(49, 98, 19, '2020-12-31 13:48:29', '2021-01-25 06:26:26'),
(14, 87, 1, '2020-12-24 17:21:33', '2021-02-08 08:14:21'),
(23, 37, 22, '2020-11-30 15:09:18', '2021-02-16 12:04:46'),
(22, 99, 8, '2020-12-06 03:50:38', '2021-01-29 11:29:00'),
(58, 76, 2, '2020-11-20 20:04:07', '2021-02-21 10:25:41'),
(25, 63, 12, '2020-12-31 09:55:48', '2021-03-17 12:38:24'),
(15, 55, 10, '2020-12-15 13:53:52', '2021-02-01 20:24:26'),
(41, 41, 24, '2021-01-08 04:27:57', '2021-01-17 07:16:20'),
(35, 70, 10, '2020-12-20 18:25:15', '2021-02-26 17:43:51'),
(44, 35, 9, '2020-12-11 13:32:55', '2021-03-01 18:05:34'),
(14, 39, 27, '2020-12-08 20:13:27', '2021-02-27 22:20:48'),
(3, 5, 18, '2020-12-04 21:10:25', '2021-02-28 14:36:02'),
(42, 15, 21, '2021-01-09 02:06:34', '2021-02-27 10:25:52'),
(29, 47, 28, '2020-12-08 22:32:14', '2021-02-15 20:35:12'),
(31, 10, 25, '2020-11-23 08:05:14', '2021-01-18 07:23:13'),
(41, 87, 2, '2021-01-06 01:01:27', '2021-03-12 09:49:46'),
(45, 3, 29, '2020-11-25 04:14:49', '2021-02-27 06:38:19'),
(52, 89, 23, '2020-12-31 11:11:42', '2021-03-07 06:36:21'),
(53, 19, 29, '2020-12-23 02:22:46', '2021-01-17 14:44:44'),
(16, 88, 26, '2020-12-13 13:19:19', '2021-02-15 21:25:18'),
(22, 55, 29, '2021-01-11 20:32:15', '2021-02-09 14:36:25'),
(7, 94, 8, '2020-12-12 11:21:16', '2021-03-19 13:39:09'),
(33, 47, 16, '2020-11-23 18:27:19', '2021-03-10 10:08:23'),
(34, 22, 9, '2020-11-25 05:02:39', '2021-02-20 18:38:32'),
(59, 5, 4, '2020-12-05 00:41:59', '2021-01-18 02:42:37'),
(32, 98, 28, '2020-11-26 16:41:54', '2021-03-09 20:01:55'),
(16, 99, 6, '2021-01-10 18:54:23', '2021-02-28 05:58:04'),
(4, 61, 22, '2020-12-03 15:48:18', '2021-03-19 02:16:26'),
(24, 56, 6, '2020-11-22 08:03:12', '2021-01-17 19:25:42'),
(3, 48, 26, '2021-01-03 14:59:28', '2021-02-20 08:26:59'),
(21, 95, 4, '2020-12-11 08:14:27', '2021-03-03 19:19:06'),
(57, 81, 8, '2020-12-03 06:13:56', '2021-01-16 14:57:34'),
(19, 73, 15, '2021-01-06 07:51:47', '2021-03-05 09:38:36'),
(16, 84, 20, '2020-11-15 16:17:45', '2021-02-13 13:54:39'),
(5, 17, 4, '2020-12-31 07:01:16', '2021-02-14 05:12:27'),
(23, 43, 7, '2020-12-23 01:07:51', '2021-02-01 18:40:06'),
(10, 30, 1, '2020-12-24 02:07:16', '2021-02-20 22:36:19'),
(2, 34, 1, '2020-12-17 08:22:05', '2021-02-24 02:45:05'),
(30, 13, 3, '2020-12-16 02:28:50', '2021-03-10 03:48:16'),
(32, 2, 30, '2021-01-03 11:07:34', '2021-02-15 16:57:00'),
(33, 45, 24, '2020-11-27 17:43:35', '2021-02-08 02:45:17'),
(52, 28, 25, '2020-12-02 14:38:58', '2021-01-16 21:47:22'),
(8, 33, 6, '2020-12-19 15:34:05', '2021-03-10 11:31:12'),
(38, 78, 1, '2020-11-16 16:55:25', '2021-02-02 22:56:30'),
(17, 16, 19, '2020-11-21 02:56:01', '2021-02-16 03:51:25'),
(3, 89, 21, '2020-11-20 01:34:03', '2021-02-14 17:57:06'),
(15, 88, 15, '2021-01-14 04:29:48', '2021-01-17 10:51:16'),
(49, 76, 19, '2020-12-11 10:12:40', '2021-01-29 01:45:10'),
(13, 80, 19, '2020-12-31 03:02:46', '2021-02-12 21:15:45'),
(49, 5, 30, '2020-11-15 13:11:46', '2021-02-13 07:53:06'),
(19, 100, 30, '2021-01-09 10:47:42', '2021-02-10 05:52:54'),
(32, 44, 13, '2020-12-28 21:15:10', '2021-03-04 02:27:16'),
(3, 1, 27, '2020-12-04 12:05:56', '2021-02-24 11:03:31'),
(6, 51, 7, '2020-12-07 05:16:16', '2021-01-26 03:46:38'),
(54, 66, 19, '2020-12-05 14:06:00', '2021-02-19 08:37:12'),
(29, 68, 29, '2020-11-20 05:33:31', '2021-03-14 11:00:20'),
(30, 95, 29, '2020-11-16 13:32:01', '2021-03-11 01:53:09'),
(57, 45, 24, '2021-01-02 10:42:54', '2021-03-12 13:13:07'),
(6, 46, 16, '2020-12-01 08:59:30', '2021-03-14 16:38:59'),
(21, 95, 7, '2020-11-24 13:14:41', '2021-02-14 07:36:24'),
(46, 15, 12, '2020-12-28 13:23:03', '2021-03-03 17:08:56'),
(11, 3, 3, '2020-12-10 15:47:41', '2021-02-11 21:34:55'),
(41, 43, 15, '2020-12-30 11:41:12', '2021-03-13 15:29:41'),
(58, 86, 13, '2021-01-08 11:38:26', '2021-01-20 00:28:10'),
(10, 65, 3, '2020-12-20 14:44:35', '2021-03-03 12:58:17'),
(21, 78, 13, '2021-01-13 12:05:31', '2021-02-19 16:04:12'),
(39, 17, 13, '2020-12-09 00:25:04', '2021-01-22 06:32:54'),
(51, 75, 16, '2020-12-29 16:11:48', '2021-02-09 18:19:01'),
(60, 26, 9, '2020-12-20 21:07:13', '2021-01-29 03:20:52'),
(5, 89, 22, '2021-01-03 21:09:32', '2021-01-28 23:44:30'),
(42, 80, 23, '2020-11-16 06:26:53', '2021-01-22 10:26:31'),
(58, 54, 23, '2020-11-26 16:43:43', '2021-02-14 23:12:08'),
(20, 73, 15, '2020-12-20 00:13:59', '2021-03-11 02:17:28'),
(24, 70, 14, '2020-11-16 07:30:14', '2021-02-27 07:17:19'),
(18, 22, 28, '2020-12-18 12:39:02', '2021-03-19 14:26:06'),
(39, 85, 15, '2020-11-21 06:09:19', '2021-02-25 03:59:44'),
(19, 97, 4, '2020-12-27 23:30:10', '2021-02-20 03:24:44'),
(33, 96, 5, '2020-12-29 16:34:43', '2021-03-17 04:52:33'),
(14, 13, 28, '2020-11-19 11:59:24', '2021-02-14 07:04:31'),
(4, 39, 10, '2020-12-30 23:43:08', '2021-02-04 00:54:52'),
(22, 25, 7, '2021-01-02 03:35:52', '2021-01-23 00:03:00'),
(24, 14, 8, '2020-11-19 14:20:09', '2021-02-20 00:25:08'),
(52, 3, 3, '2020-11-17 13:25:08', '2021-03-05 09:53:29'),
(36, 78, 19, '2021-01-11 16:48:53', '2021-02-11 02:19:55'),
(51, 6, 16, '2020-11-15 07:26:36', '2021-02-19 12:43:31'),
(33, 20, 17, '2020-12-20 18:49:31', '2021-03-19 00:18:33'),
(13, 6, 24, '2020-11-22 15:23:54', '2021-02-24 06:44:41'),
(51, 69, 4, '2021-01-04 23:14:28', '2021-02-21 19:39:01'),
(28, 94, 4, '2021-01-07 01:33:00', '2021-03-13 17:05:53'),
(27, 95, 16, '2020-11-16 08:45:04', '2021-02-13 06:46:05'),
(11, 14, 9, '2021-01-07 04:08:32', '2021-01-19 20:29:53'),
(43, 5, 21, '2020-11-15 13:03:24', '2021-02-14 22:05:39'),
(37, 93, 10, '2021-01-12 19:17:07', '2021-03-15 10:40:41'),
(33, 83, 11, '2020-11-20 21:24:54', '2021-03-12 09:08:55'),
(30, 35, 3, '2020-11-23 08:30:20', '2021-03-08 03:06:34'),
(13, 51, 12, '2020-11-28 10:48:59', '2021-02-15 11:22:28'),
(41, 62, 29, '2020-11-22 20:01:08', '2021-03-16 08:44:22'),
(57, 1, 21, '2020-11-23 11:32:44', '2021-01-19 17:31:15'),
(18, 76, 9, '2020-12-29 09:14:45', '2021-01-24 16:19:34'),
(53, 28, 20, '2020-12-21 06:14:55', '2021-02-16 06:26:39'),
(54, 45, 6, '2021-01-14 19:29:46', '2021-01-25 14:05:43'),
(23, 97, 16, '2020-11-16 19:15:53', '2021-01-17 00:26:53'),
(42, 38, 20, '2021-01-02 11:05:31', '2021-03-05 00:40:34'),
(8, 82, 23, '2021-01-02 13:42:51', '2021-03-12 07:58:15'),
(21, 45, 18, '2020-11-27 00:03:04', '2021-02-22 09:35:01'),
(47, 20, 30, '2021-01-03 06:54:57', '2021-01-20 02:20:46')
GO




/************************************************************************************************************  
												CREATE VIEWS
*************************************************************************************************************/ 

DROP VIEW IF EXISTS vwMembers
GO

DROP VIEW IF EXISTS vwMembersIssuedBooks
GO

DROP VIEW IF EXISTS vwMembersBookCount
GO

DROP VIEW IF EXISTS vwStudentBookFine
GO

DROP VIEW IF EXISTS  vwFacultyBookFine
GO

DROP VIEW IF EXISTS vwMemberLibrary
GO


CREATE VIEW vwMembers AS
	SELECT m.MemberID, m.MemberFirstName, m.MemberLastName, m.MemberPhoneNumber
	FROM Members m  
GO

CREATE VIEW vwMembersIssuedBooks AS
	SELECT m.MemberID, 
		   mb.BookID, 
		   mb.LibraryID,
	       m.MemberFirstName, 
	       m.MemberLastName, 
	       m.MemberPhoneNumber,
	       m.MemberCredit,
	       mb.DateOfIssue,
	       mb.DateOfReturn,
	       [DateDiff] = DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn)
	FROM Members m  
      JOIN  MemberIssuedBooks mb ON mb.MemberID = m.MemberID
 GO

CREATE VIEW vwMembersBookCount AS
	SELECT m.MemberID, 
		   m.MemberFirstName, 
		   m.MemberLastName, 
	      [BookIssued] = COUNT(mb.BookID)
	FROM Members m  
		JOIN MemberIssuedBooks mb ON mb.MemberID = m.MemberID
	GROUP BY m.MemberID,m.MemberFirstName, m.MemberLastName
GO

CREATE VIEW vwStudentBookFine AS
	SELECT  m.MemberID, 
			mb.BookID,
			m.MemberFirstName, 
			m.MemberPhoneNumber,
			m.MemberCredit,
			[DateDif] = DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn),
			[FineCharged] = CASE
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 20  THEN 0
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 40  THEN 10
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 60  THEN 25
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 80  THEN 50
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 100 THEN 80
								WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 120 THEN 120
							ELSE															   200
						END
	FROM MemberIssuedBooks mb
		JOIN Members m ON mb.MemberID = m.MemberID
	WHERE m.isFaculty = 0	
	ORDER BY m.MemberID
		OFFSET 0 ROWS
			FETCH NEXT 50 ROWS ONLY
GO

CREATE VIEW vwFacultyBookFine AS
	SELECT	m.MemberID, 
			mb.BookID,
			m.MemberFirstName, 
			m.MemberPhoneNumber,
		    [DateDif] = DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn),
			[FineCharged] =  CASE
								 WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 30  THEN 0
								 WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 60  THEN 10
								 WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 90  THEN 25
								 WHEN DATEDIFF(DAY, mb.DateOfIssue, mb.DateOfReturn) < 120 THEN 50
							 ELSE															    80						
						END
	FROM MemberIssuedBooks mb
		  JOIN Members m ON mb.MemberID = m.MemberID
	WHERE m.isFaculty = 1
	ORDER BY m.MemberID
			OFFSET 0 ROWS
				FETCH NEXT 50 ROWS ONLY
GO

CREATE VIEW vwMemberLibrary AS
	SELECT  l.LibraryID,
		    mb.MemberID,
		    l.LibraryName,
	        l.LibraryPhone,
	    	m.MemberFirstName,
		    m.MemberPhoneNumber
	FROM  MemberIssuedBooks mb
		JOIN [Library] l ON  mb.LibraryID = l.LibraryID
		JOIN Members m ON  mb.MemberID  = m.MemberID
GO


/************************************************************************************************************  
												CREATE TRIGGERS
*************************************************************************************************************/


/* =====================================================================
	Name   : Admins_TRIGGER     
======================================================================== */
CREATE TRIGGER Admins_TRIGGER ON Admins
    AFTER INSERT, UPDATE, DELETE
AS BEGIN
    IF EXISTS (SELECT * FROM deleted) BEGIN
        PRINT 'You may not modify records from this table.'
    END
    ROLLBACK TRANSACTION
    RETURN

    IF EXISTS (SELECT * FROM inserted) BEGIN
        PRINT 'You may not modify records from this table.'
    END
    ROLLBACK TRANSACTION
    RETURN
END
GO


/************************************************************************************************************  
												CREATE STORED PROCEDURES
*************************************************************************************************************/


/*======================================================================
	Name    : spAddBook
	Purpose : Adds a new book in the database
========================================================================*/

CREATE PROCEDURE spAddBook
    @BookTitle	    VARCHAR(50),
    @AuthorName	    VARCHAR(50),
    @ISBN		    VARCHAR(20),
    @Publication	VARCHAR(50),
    @BookGenre	    VARCHAR(50),
    @Pages					INT,
    @Cost		    VARCHAR(10)

AS BEGIN
	DECLARE @loggedIn BIT
    SELECT @loggedIn = isAdmin FROM Admins

    IF @loggedIn = 1 BEGIN
        IF NOT EXISTS(SELECT * FROM Books WHERE BookTitle = @BookTitle ) BEGIN
            INSERT BOOKS (BookTitle,AuthorName,ISBN,Publication,BookGenre,Pages,Cost) VALUES 
                (@BookTitle, @AuthorName, @ISBN, @Publication, @BookGenre, @Pages, @Cost)
        END
        ELSE BEGIN
            UPDATE  Books
            SET     AuthorName	 = @AuthorName,	 
                    ISBN		 = @ISBN		 ,
                    Publication	 = @Publication,
                    BookGenre	 = @BookGenre, 
                    Pages		 = @Pages	,	 
                    Cost		 = @Cost		 
            WHERE   BookTitle = @BookTitle
        END
	 END ELSE BEGIN

	PRINT 'You must authorize before you can add or update a book.'
    END
END
GO

/*======================================================================
	Name    : spAddMember
	Purpose : Adds a new member in the database
========================================================================*/

CREATE PROCEDURE spAddMember
    @MemberFirstName			VARCHAR(50),
    @MemberLastName				VARCHAR(50),
    @MemberPhoneNumber		    VARCHAR(20),
    @MemberCredit					  MONEY,
    @isFaculty						    BIT

AS BEGIN

    DECLARE @loggedIn BIT
    SELECT @loggedIn = isAdmin FROM Admins

    IF @loggedIn = 1 BEGIN
        IF NOT EXISTS(SELECT * FROM Members WHERE MemberFirstName = @MemberFirstName ) BEGIN
            INSERT Members(MemberFirstName,MemberLastName,MemberPhoneNumber,MemberCredit,isFaculty) VALUES 
                (@MemberFirstName, @MemberLastName, @MemberPhoneNumber, @MemberCredit, @isFaculty)
        END
        ELSE BEGIN
            UPDATE  Members
            SET     MemberLastName	  = @MemberLastName,	 
                    MemberPhoneNumber = @MemberPhoneNumber,
                    MemberCredit	  = @MemberCredit,
                    isFaculty	      = @isFaculty		 
            WHERE   MemberFirstName   = @MemberFirstName
        END
     END ELSE BEGIN

	PRINT 'You must authorize before you can add or update a member.'
    END
END
GO

/*======================================================================
	Name    : spAddLibrary
	Purpose : Adds a new library in the database
========================================================================*/


CREATE PROCEDURE spAddLibrary
	@LibraryName	    VARCHAR(50),
	@LibraryAddress		VARCHAR(20),
    @LibraryPhone		VARCHAR(50),
	@LibraryCity		VARCHAR(50),
	@LibraryState	    VARCHAR(50),
    @LibraryZip			    CHAR(2)
AS BEGIN

    DECLARE @loggedIn BIT
    SELECT @loggedIn = isAdmin FROM Admins

    IF @loggedIn = 1 BEGIN
		IF NOT EXISTS(SELECT * FROM [Library] WHERE LibraryName = @LibraryName ) BEGIN
            INSERT Library (LibraryName,LibraryAddress,LibraryPhone,LibraryCity,LibraryState,LibraryZip) VALUES 
                (@LibraryName, @LibraryAddress, @LibraryPhone, @LibraryCity, @LibraryState, @LibraryZip)
			END
        ELSE BEGIN
            UPDATE  [Library]
			SET     LibraryAddress	 = @LibraryAddress	 ,
                    LibraryPhone	 = @LibraryPhone	,
                    LibraryCity	     = @LibraryCity	,
                    LibraryState	 = @LibraryState,	 
                    LibraryZip		 = @LibraryZip		 
            WHERE   LibraryName      = @LibraryName
        END
    END ELSE BEGIN

        PRINT 'You must authorize before you can add or update a library.'
    END
END
GO

/*======================================================================
	Name    : spGet_Faculty
	Purpose : Gets a list of faculty in the database
========================================================================*/

CREATE PROCEDURE spGet_Faculty
AS BEGIN
	SELECT MemberID, MemberFirstName, MemberLastName, MemberPhoneNumber
	FROM Members
	WHERE isFaculty = 1
END
GO

/*======================================================================
	Name    : spGet_Student
	Purpose : Gets a list of students in the database
========================================================================*/

CREATE PROCEDURE spGet_Student
AS BEGIN
	SELECT MemberID, MemberFirstName, MemberLastName, MemberPhoneNumber
	FROM Members
	WHERE isFaculty = 0
END
GO

/*======================================================================
	Name    : spGet_Books
	Purpose : Gets a list of books in the database
========================================================================*/

CREATE PROCEDURE spGet_Books
AS BEGIN
	SELECT *
	FROM Books
END
GO

/*======================================================================
	Name    : spDeleteBook
	Purpose : Deletes a book fronm the database
========================================================================*/

CREATE PROCEDURE spDeleteBook
    @BookTitle	     VARCHAR(100),
    @AuthorName	     VARCHAR(100),
    @ISBN		     VARCHAR(100),
    @Publication	 VARCHAR(100),
    @BookGenre	     VARCHAR(100),
    @Pages					 INT,			
    @Cost            VARCHAR(100)

AS BEGIN
	DECLARE @loggedIn BIT
    SELECT @loggedIn = isAdmin FROM Admins

    IF @loggedIn = 1 BEGIN
        IF EXISTS(SELECT * FROM Books WHERE BookTitle = @BookTitle) BEGIN

            DECLARE @id INT
            SELECT @id = BookID FROM Books WHERE BookTitle = @BookTitle

            DELETE FROM Books WHERE	(BookID		 = @id)			 AND
                                    (BookTitle   = @BookTitle)   AND
                                    (AuthorName  = @AuthorName)  AND
                                    (ISBN        = @ISBN)        AND
                                    (Publication = @Publication) AND
                                    (BookGenre   = @BookGenre)   AND
                                    (Pages       = @Pages)       AND
									(Cost        = @Cost)
        END ELSE BEGIN
            PRINT 'The book does not exist in the library database.'
        END
    END ELSE BEGIN
        PRINT 'You must authorize before you can delete a book.'
    END
END
GO

/*======================================================================
	Name    : spAuthorizationOfAdmin
	Purpose : Authorization of Admins
========================================================================*/

CREATE PROCEDURE spAuthorizationOfAdmin  
	@password VARCHAR(30)
WITH ENCRYPTION
AS BEGIN

    DECLARE @correct VARCHAR(30)
    SELECT  @correct = CAST(DECOMPRESS(COMPRESS([UserPassword]))AS VARCHAR(30))
    FROM    Admins

    ALTER TABLE Admins DISABLE TRIGGER Admins_TRIGGER

    UPDATE  Admins
    SET     isAdmin = IIF(@correct = @password, 1, 0)

    ALTER TABLE Admins ENABLE TRIGGER Admins_TRIGGER

    DECLARE @message BIT
    SELECT  @message = isAdmin
    FROM    Admins

    IF @message <> 0
        PRINT 'Correct Credentials. Successfully Logged In.'
    ELSE
        PRINT 'Incorrect Crendentials. Not Logged In.'
END
GO

/************************************************************************************************************  
												Functions
*************************************************************************************************************/
DROP FUNCTION IF EXISTS AvgFinePerBookStudent
GO

CREATE FUNCTION dbo.AvgFinePerBookStudent (@MemberID INT) RETURNS INT
AS BEGIN
    DECLARE @FineCharged  INT,
            @BookIssued	  INT
    SELECT 	@FineCharged      = SUM(sb.FineCharged),
			@BookIssued		  = mb.BookIssued
    FROM    vwStudentBookFine sb
	JOIN	vwMembersBookCount mb ON mb.MemberID = sb.MemberID 
    WHERE   sb.MemberID = @MemberID
	GROUP BY mb.BookIssued
	RETURN @FineCharged / @BookIssued 
END
GO

/*
	'These are Giustina Records.' 
			10 + 80 + 120 + 10 = 220 Divide that by 4  = 55
		4	100	Giustina	192-394-2251	50.00	32	10
		4	36	Giustina	192-394-2251	50.00	86	80
		4	61	Giustina	192-394-2251	50.00	106	120
		4	39	Giustina	192-394-2251	50.00	36	10

To test the function, run the following query

		SELECT  TOP(1) sb.MemberID, 
				sb.MemberFirstName,  
				[Avg] = dbo.AvgFinePerBookStudent(4)
		FROM vwStudentBookFine sb
		WHERE sb.MemberID = 4

*/


/************************************************************************************************************  
												Indexes
*************************************************************************************************************/

--=============================== Book Titles
CREATE INDEX BookTitleIdx
ON Books (BookTitle)
GO

--=============================== Book ID
CREATE INDEX BookIDx
ON Books (BookID)
GO










